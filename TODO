The GC has to be smarter...
Consider this:

(define (loop n)
  (if (= n 0)
	'derp
	(begin
	  (list 1 2 3 4 5 6 7 8 9 10)
	  (loop (- n 1)))))

Massive memory leakage occurs when this is run.

Might have to run gc() more frequently, and mark/unmark stuff along the way

----------------------------------------

Currently unsupported R6RS datatypes:
complex numbers, (non-integer) real numbers, rational numbers,
"exact non-negative integer object", "exact integer object",
characters, vectors, strings, conditions, bytevectors.

Library/package stuff is also completely unsupported as of writing.

Some stuff I am more likely to (try to) add:

- square parentheses [ ]

- support for semiquotation and related escapes
  DA STANDARD is confusing
  r6rs.pdf, page 55...

- implement let* (I don't even know what it does)
- parse the various "." notations
	"." for rest in lambda/define is now supported
        TODO '(a . b)

- strings, floats ?

- syntax modification macros !!11!

- '23 should evaluate to 23 (r6rs.pdf, section 1.10, page 8)

- vectors

- call/cc would be a nice feature.
  I've read about building scheme interpreters/compilers in the "PAIP" book
  (http://norvig.com/paip.html) and IIRC it seems that the simplest way to get
  call/cc working is to write a stack-based bytecode VM... Unfortunately
  this project currently isn't a stack-based bytecode VM
