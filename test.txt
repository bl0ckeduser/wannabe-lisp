;; Partly based on the examples in the first few chapters of SICP

(define (square n) (* n n))

(define (abs x)			
	(if (>= x 0)		
		x		
		(- x)))	

(define (fact n)
	(if (= n 0)
		1
		(* n (fact (- n 1)))))

(define (compose f g)
	(lambda (x) (f (g x))))

(define (foldr list func id)
	(if (null? list)
		id
		(func (car list) (foldr (cdr list) func id))))

(define (pair-max a b) (if (> a b) a b))

(define (list-max list)
	(foldr list pair-max 0))

(define (select f)
	(lambda (a b)
		(if (f a)
			(cons a b)
			b)))

(define (filter f list)
	(foldr list (select f) '()))

(define (exclude n list)
	(filter
		(lambda (x) (not (= x n)))
		list))

(define (sorted list)
	(if (null? list)
		'()
		(cons (list-max list)
			(sorted (exclude (list-max list) list)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Some tests...

(define (display-nl exp)
  (display exp)
  (newline))

(display-nl (fact 3))

(display-nl (fact 5))

(display-nl (abs -3))

(display-nl
	(sorted '(1 3 2 5 7 9 13 21 46 55 02)))

