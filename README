Babby's first toy lisp (scheme) interpreter

Based on the examples given in the SICP videos
(http://groups.csail.mit.edu/mac/classes/6.001/abelson-sussman-lectures/)

See test.txt, closure.txt for example code
To build and run the code, do

$ make
$ ./lisp <test.txt

Interactive REPL mode is accessed thusly:
$ lisp -i
]=> 

Optionally, composite car/cdr primitives (like caddr) can be built thusly:

$ python gen-cadr.py >prefix.txt 


There are some important things missing; see `TODO'

-----------------------------------

Some notes on special features
==============================

I. Special functions

- (leval quoted-exp) de-quotes and evaluates quoted-exp in the local scope.
  For example, (leval '(+ 1 2 3)) => 6.

- (max-space exp) evaluates exp in the local scope, returning a number
  indicating the peak number of stack frames used in the evaluation.
  See tco-test.txt for example code. TCO'd iterative processes will 
  return a constant space count; recursive ones will return a growing
  space count.

II. Parenthesis autocomplete:

you type a big expression in the REPL, then hit return with 
an empty line and the missing parentheses will be automatically
added

]=> (define (bob x)
...    (cond ((= x 0) 123
...          ((= x 1) 456
...             
... ))))

		~~~~~~~~

III. Auto-indent

The REPL auto-indents
