Babby's first toy lisp (scheme) interpreter
===========================================

Based on the examples given in the SICP videos
(http://groups.csail.mit.edu/mac/classes/6.001/abelson-sussman-lectures/)

and also on the SICP text's examples
(http://mitpress.mit.edu/sicp/)

Currently supported Scheme procedures and special forms are:
<, <=, =, >, >=, -, *, +, and, append, apply, begin, car, cdr, caar,
cdar, ..., caaaaar, cond, cons, cons-stream, define, delay, display, eq?,
fold-right, force, if, lambda, length, let, list, list-ref, list-tail,
newline, not, null?, number?, odd?, or, pair?, remainder, reverse, set!,
stream-car, stream-cdr, stream-null?, symbol?, the-empty-stream.

(Some more obscure variations of some special forms may not yet be supported)

Features include: tail-recursion optimization, noobish mark-sweep garbage 
collection, support for quotation.

To build the code, do:
$ make

To run interactive REPL mode, do:
$ ./lisp -i

To run a code file, do:
$ ./lisp <test.txt

The file `TODO' lists features that I might eventually add.

Example code files, available in the directory `test', are: 
test.txt, closure.txt, tco-test.txt, pattern-matcher.txt, var-args.txt.

-----------------------------------

Some notes on special features
==============================

I. Special functions

- (leval quoted-exp) de-quotes and evaluates quoted-exp in the local scope.
  For example, (leval '(+ 1 2 3)) => 6.

- (max-space exp) evaluates exp in the local scope, returning a number
  indicating the peak number of stack frames used in the evaluation.
  See tco-test.txt for example code. TCO'd iterative processes will 
  return a constant space count; recursive ones will return a growing
  space count. max-space cannot be used recursively.

- (save-to 'file-name.txt) logs to a file.

- (load 'file.txt) loads code from a file.

				~~~~~~~~

II. Parenthesis autocomplete:

you type a big expression in the REPL, then hit return with 
an empty line and the missing parentheses will be automatically
added

]=> (define (bob x)
...    (cond ((= x 0) 123
...          ((= x 1) 456
...             
... ))))

				~~~~~~~~

III. Auto-indent

The REPL auto-indents


