;; Summary
;; 1. Dictionary
;; 2. Pattern matcher
;; 3. Tests

;; ====================================================================

;; 1. Dictionary

(define dict '())

(define (add key val)
   (set!
      dict
      (cons (cons key val) dict)))

(define (lookup-in key dict)
   (begin
      (define (iter key list)
         (cond
            ((null? list) '())
            ((eq? (caar list) key) (cdar list))
            (else
               (iter key (cdr list)))))
      (iter key dict)))

(define (empty-dict)
	(set! dict '()))

;; ====================================================================

;; 2. Pattern matcher

;; Main interface to the matcher
(define (match skel tree)
	(begin
		;; Clean dictionary
		(empty-dict)
		;; 'a => '(a) to simplify matcher's work
		(if (not (pair? tree))
			(set! tree (list tree)))
		;; If it matches, give the dict, else give nothing
		(if (match-iter skel tree)
			dict
			'())))

(define (match-iter skel tree)
   (cond
      ;; If one is nil, other must also be
      ((null? skel) (null? tree))
      ((null? tree) (null? skel)) 

      ;; Variable matching -- '(? VAR)
      ((and (pair? skel) (pair? (car skel)) (eq? (caar skel) '?))
         (let 
	       ((val (cadar skel))
		(key (car tree)))

               ;; Check if variable already set
               (if (not (null? (lookup-in val dict)))
                  ;; Yes -- check if tree is same as earlier match
                  (and
                     (match-iter (lookup-in val dict) key)
                     (match-iter (cdr skel) (cdr tree)))
                  ;; No -- happily store match and carry on
                  (begin
                     (add val key)
                     (match-iter (cdr skel) (cdr tree))))))

      ;; General list case
      ((and (pair? skel) (pair? tree))
         (and (match-iter (car skel) (car tree))
              (match-iter (cdr skel) (cdr tree))))

      ;; Literal symbol matching
      ((symbol? skel)
         (and (symbol? tree) (eq? skel tree)))

      ;; Literal number matching
      ((number? skel)
         (and (number? tree) (= skel tree)))

      ;; #f is a sane default
      (else 
	false)))

;; ====================================================================

;; 3. Tests

(define (iterate func list)
	(if (null? list)
		'()
		(begin
			(func (car list))
			(iterate func (cdr list)))))

(define (display-nl exp)
  (display exp)
  (newline))

(iterate 
	display-nl
	(list
		(match '((? x)) 'a)
		(match '((? x) (? y)) '(a b))
		(match '((? x) (? y)) '(a a))
		(match '((? x) (? x)) '(a a))
		(match '((? x) (? x)) '(a b))
		(match '((? x) (? x) foo) '(a a foo))
		(match '((? x) foo (? x)) '(a foo a))
	)
)


;; Substitution
(define (subst skel dict)
   (cond
      ;; leave nulls as-is
      ((null? skel)
         skel)

      ;; distribute the subsitution on the members of a pair
      ((pair? skel)
         (cons
            (subst (car skel) dict)
            (subst (cdr skel) dict)))

      ;; substitute symbols
      ((symbol? skel)
         (let
            ((m (lookup-in skel dict)))
            (if (not (null? m))
               m
               skel)))

      ;; default case
      (else
          skel)))

;; ---------- testing substitution --------------

(newline)
(map display-nl '(Substitution ============))


(define (substitutor skel1 skel2)
   (lambda (u)
      (subst skel2
         (match skel1 u))))

(display-nl
   ((substitutor '((? x)) '(x x x 123 x))
      '(a)))

;; In MIT/GNU Scheme the following does the same thing:
;; (display
;;    (lambda (x)
;;       `(,@x ,@x ,@x 123 ,@x))
;;    '(a))

;; But my interpreter doesn't support semiquotes as of writing :(

(display-nl
   ((substitutor '((? x) (? y)) '(x y hahaha x y))
      '(1 2)))

;; However, the Scheme lambda syntax can't do checks
;; for repeated variables like below:

(display-nl
   ((substitutor '((? x) (? x)) '(x is the same thing as x))
      '(1 2)))

(display-nl
   ((substitutor '((? x) (? x)) '(x is the same thing as x))
      '(1 1)))

(display-nl
   ((substitutor '((? x) (? x)) '(x is the same thing as x))
      '(foo foo)))

(display-nl
   ((substitutor '((? x) (? x)) '(x is the same thing as x))
      '(foo bar)))


