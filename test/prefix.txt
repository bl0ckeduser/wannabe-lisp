;; Boolean literals 
(define true (= 1 1))
(define false (= 1 0))
(define #t true)
(define #f false)

;; Streams
;; See mitpress.mit.edu/sicp/full-text/book/book-Z-H-24.html
(define (force u) (u))
(define stream-car car)
(define (stream-cdr s) (force (cdr s)))
(define stream-null? null?)
(define the-empty-stream '())

;; Composite car/cdr primitives
(define (caar x) (car (car x))) 
(define (cdar x) (cdr (car x))) 
(define (cadr x) (car (cdr x))) 
(define (cddr x) (cdr (cdr x))) 
(define (caaar x) (car (car (car x)))) 
(define (cdaar x) (cdr (car (car x)))) 
(define (cadar x) (car (cdr (car x)))) 
(define (cddar x) (cdr (cdr (car x)))) 
(define (caadr x) (car (car (cdr x)))) 
(define (cdadr x) (cdr (car (cdr x)))) 
(define (caddr x) (car (cdr (cdr x)))) 
(define (cdddr x) (cdr (cdr (cdr x)))) 
(define (caaaar x) (car (car (car (car x))))) 
(define (cdaaar x) (cdr (car (car (car x))))) 
(define (cadaar x) (car (cdr (car (car x))))) 
(define (cddaar x) (cdr (cdr (car (car x))))) 
(define (caadar x) (car (car (cdr (car x))))) 
(define (cdadar x) (cdr (car (cdr (car x))))) 
(define (caddar x) (car (cdr (cdr (car x))))) 
(define (cdddar x) (cdr (cdr (cdr (car x))))) 
(define (caaadr x) (car (car (car (cdr x))))) 
(define (cdaadr x) (cdr (car (car (cdr x))))) 
(define (cadadr x) (car (cdr (car (cdr x))))) 
(define (cddadr x) (cdr (cdr (car (cdr x))))) 
(define (caaddr x) (car (car (cdr (cdr x))))) 
(define (cdaddr x) (cdr (car (cdr (cdr x))))) 
(define (cadddr x) (car (cdr (cdr (cdr x))))) 
(define (cddddr x) (cdr (cdr (cdr (cdr x))))) 
(define (caaaaar x) (car (car (car (car (car x)))))) 
